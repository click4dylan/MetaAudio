<?xml version="1.0" encoding="utf-8"?>
<Project DefaultTargets="Build" ToolsVersion="16.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <PreferredToolArchitecture>x86</PreferredToolArchitecture>
  </PropertyGroup>
  <ItemGroup Label="ProjectConfigurations">
    <ProjectConfiguration Include="Debug|Win32">
      <Configuration>Debug</Configuration>
      <Platform>Win32</Platform>
    </ProjectConfiguration>
    <ProjectConfiguration Include="Release|Win32">
      <Configuration>Release</Configuration>
      <Platform>Win32</Platform>
    </ProjectConfiguration>
    <ProjectConfiguration Include="MinSizeRel|Win32">
      <Configuration>MinSizeRel</Configuration>
      <Platform>Win32</Platform>
    </ProjectConfiguration>
    <ProjectConfiguration Include="RelWithDebInfo|Win32">
      <Configuration>RelWithDebInfo</Configuration>
      <Platform>Win32</Platform>
    </ProjectConfiguration>
  </ItemGroup>
  <PropertyGroup Label="Globals">
    <ProjectGuid>{54372A60-7C60-3A64-86DF-0443A8B8274F}</ProjectGuid>
    <WindowsTargetPlatformVersion>10.0.19041.0</WindowsTargetPlatformVersion>
    <Keyword>Win32Proj</Keyword>
    <Platform>Win32</Platform>
    <ProjectName>MetaAudio</ProjectName>
    <VCProjectUpgraderObjectName>NoUpgrade</VCProjectUpgraderObjectName>
  </PropertyGroup>
  <Import Project="$(VCTargetsPath)\Microsoft.Cpp.Default.props" />
  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Debug|Win32'" Label="Configuration">
    <ConfigurationType>DynamicLibrary</ConfigurationType>
    <CharacterSet>MultiByte</CharacterSet>
    <PlatformToolset>v142</PlatformToolset>
    <WholeProgramOptimization>false</WholeProgramOptimization>
  </PropertyGroup>
  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|Win32'" Label="Configuration">
    <ConfigurationType>DynamicLibrary</ConfigurationType>
    <CharacterSet>MultiByte</CharacterSet>
    <PlatformToolset>v142</PlatformToolset>
    <WholeProgramOptimization>true</WholeProgramOptimization>
  </PropertyGroup>
  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|Win32'" Label="Configuration">
    <ConfigurationType>DynamicLibrary</ConfigurationType>
    <CharacterSet>MultiByte</CharacterSet>
    <PlatformToolset>v142</PlatformToolset>
    <WholeProgramOptimization>true</WholeProgramOptimization>
  </PropertyGroup>
  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|Win32'" Label="Configuration">
    <ConfigurationType>DynamicLibrary</ConfigurationType>
    <CharacterSet>MultiByte</CharacterSet>
    <PlatformToolset>v142</PlatformToolset>
    <WholeProgramOptimization>true</WholeProgramOptimization>
  </PropertyGroup>
  <Import Project="$(VCTargetsPath)\Microsoft.Cpp.props" />
  <ImportGroup Label="ExtensionSettings">
  </ImportGroup>
  <ImportGroup Label="PropertySheets">
    <Import Project="$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props" Condition="exists('$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props')" Label="LocalAppDataPlatform" />
  </ImportGroup>
  <PropertyGroup Label="UserMacros" />
  <PropertyGroup>
    <_ProjectFileVersion>10.0.20506.1</_ProjectFileVersion>
    <OutDir Condition="'$(Configuration)|$(Platform)'=='Debug|Win32'">E:\nightfire_sdk\MetaAudio\Debug\</OutDir>
    <IntDir Condition="'$(Configuration)|$(Platform)'=='Debug|Win32'">MetaAudio.dir\Debug\</IntDir>
    <TargetName Condition="'$(Configuration)|$(Platform)'=='Debug|Win32'">MetaAudio</TargetName>
    <TargetExt Condition="'$(Configuration)|$(Platform)'=='Debug|Win32'">.dll</TargetExt>
    <GenerateManifest Condition="'$(Configuration)|$(Platform)'=='Debug|Win32'">true</GenerateManifest>
    <OutDir Condition="'$(Configuration)|$(Platform)'=='Release|Win32'">E:\nightfire_sdk\MetaAudio\Release\</OutDir>
    <IntDir Condition="'$(Configuration)|$(Platform)'=='Release|Win32'">MetaAudio.dir\Release\</IntDir>
    <TargetName Condition="'$(Configuration)|$(Platform)'=='Release|Win32'">MetaAudio</TargetName>
    <TargetExt Condition="'$(Configuration)|$(Platform)'=='Release|Win32'">.dll</TargetExt>
    <GenerateManifest Condition="'$(Configuration)|$(Platform)'=='Release|Win32'">true</GenerateManifest>
    <OutDir Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|Win32'">E:\nightfire_sdk\MetaAudio\MinSizeRel\</OutDir>
    <IntDir Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|Win32'">MetaAudio.dir\MinSizeRel\</IntDir>
    <TargetName Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|Win32'">MetaAudio</TargetName>
    <TargetExt Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|Win32'">.dll</TargetExt>
    <GenerateManifest Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|Win32'">true</GenerateManifest>
    <OutDir Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|Win32'">E:\nightfire_sdk\MetaAudio\RelWithDebInfo\</OutDir>
    <IntDir Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|Win32'">MetaAudio.dir\RelWithDebInfo\</IntDir>
    <TargetName Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|Win32'">MetaAudio</TargetName>
    <TargetExt Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|Win32'">.dll</TargetExt>
    <GenerateManifest Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|Win32'">true</GenerateManifest>
  </PropertyGroup>
  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Debug|Win32'">
    <LinkIncremental>true</LinkIncremental>
  </PropertyGroup>
  <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='Debug|Win32'">
    <ClCompile>
      <AdditionalIncludeDirectories>E:\nightfire_sdk\MetaAudio\include;E:\nightfire_sdk\MetaAudio\externals\picojson;E:\nightfire_sdk\MetaAudio\externals\steamaudio\include;E:\nightfire_sdk\MetaAudio\externals\alure\include\AL;E:\nightfire_sdk\MetaAudio\externals\openal-soft\include\AL;E:\nightfire_sdk\MetaAudio\externals\metahook\include;E:\nightfire_sdk\MetaAudio\externals\metahook\include\interface;$(HLSDK)\common;$(HLSDK)\cl_dll;$(HLSDK)\engine;$(HLSDK)\public;$(HLSDK)\pm_shared;E:\nightfire_sdk\MetaAudio\externals\openal-soft\include;C:\\Program Files (x86)\\OpenAL 1.1 SDK\\include;%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>
      <AdditionalOptions>%(AdditionalOptions) /Zc:__cplusplus</AdditionalOptions>
      <AssemblerListingLocation>$(IntDir)</AssemblerListingLocation>
      <BasicRuntimeChecks>EnableFastChecks</BasicRuntimeChecks>
      <DebugInformationFormat>EditAndContinue</DebugInformationFormat>
      <ExceptionHandling>Sync</ExceptionHandling>
      <InlineFunctionExpansion>Disabled</InlineFunctionExpansion>
      <LanguageStandard>stdcpp17</LanguageStandard>
      <Optimization>Disabled</Optimization>
      <PrecompiledHeader>NotUsing</PrecompiledHeader>
      <RuntimeLibrary>MultiThreadedDebugDLL</RuntimeLibrary>
      <RuntimeTypeInfo>true</RuntimeTypeInfo>
      <UseFullPaths>false</UseFullPaths>
      <WarningLevel>Level3</WarningLevel>
      <PreprocessorDefinitions>WIN32;_WINDOWS;AUDIO_EXPORTS;NOMINMAX;PICOJSON_USE_INT64;CMAKE_INTDIR="Debug";MetaAudio_EXPORTS;%(PreprocessorDefinitions)</PreprocessorDefinitions>
      <ObjectFileName>$(IntDir)</ObjectFileName>
      <WholeProgramOptimization>false</WholeProgramOptimization>
      <MultiProcessorCompilation>true</MultiProcessorCompilation>
    </ClCompile>
    <ResourceCompile>
      <PreprocessorDefinitions>WIN32;_DEBUG;_WINDOWS;AUDIO_EXPORTS;NOMINMAX;PICOJSON_USE_INT64;CMAKE_INTDIR=\"Debug\";MetaAudio_EXPORTS;%(PreprocessorDefinitions)</PreprocessorDefinitions>
      <AdditionalIncludeDirectories>E:\nightfire_sdk\MetaAudio\include;E:\nightfire_sdk\MetaAudio\externals\picojson;E:\nightfire_sdk\MetaAudio\externals\steamaudio\include;E:\nightfire_sdk\MetaAudio\externals\alure\include\AL;E:\nightfire_sdk\MetaAudio\externals\openal-soft\include\AL;E:\nightfire_sdk\MetaAudio\externals\metahook\include;E:\nightfire_sdk\MetaAudio\externals\metahook\include\interface;E:\nightfire_sdk\MetaAudio\externals\metahook\HLSDK\common;E:\nightfire_sdk\MetaAudio\externals\metahook\HLSDK\cl_dll;E:\nightfire_sdk\MetaAudio\externals\metahook\HLSDK\engine;E:\nightfire_sdk\MetaAudio\externals\metahook\HLSDK\public;E:\nightfire_sdk\MetaAudio\externals\metahook\HLSDK\pm_shared;E:\nightfire_sdk\MetaAudio\externals\openal-soft\include;C:\\Program Files (x86)\\OpenAL 1.1 SDK\\include;%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>
    </ResourceCompile>
    <Midl>
      <AdditionalIncludeDirectories>E:\nightfire_sdk\MetaAudio\include;E:\nightfire_sdk\MetaAudio\externals\picojson;E:\nightfire_sdk\MetaAudio\externals\steamaudio\include;E:\nightfire_sdk\MetaAudio\externals\alure\include\AL;E:\nightfire_sdk\MetaAudio\externals\openal-soft\include\AL;E:\nightfire_sdk\MetaAudio\externals\metahook\include;E:\nightfire_sdk\MetaAudio\externals\metahook\include\interface;E:\nightfire_sdk\MetaAudio\externals\metahook\HLSDK\common;E:\nightfire_sdk\MetaAudio\externals\metahook\HLSDK\cl_dll;E:\nightfire_sdk\MetaAudio\externals\metahook\HLSDK\engine;E:\nightfire_sdk\MetaAudio\externals\metahook\HLSDK\public;E:\nightfire_sdk\MetaAudio\externals\metahook\HLSDK\pm_shared;E:\nightfire_sdk\MetaAudio\externals\openal-soft\include;C:\\Program Files (x86)\\OpenAL 1.1 SDK\\include;%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>
      <OutputDirectory>$(ProjectDir)/$(IntDir)</OutputDirectory>
      <HeaderFileName>%(Filename).h</HeaderFileName>
      <TypeLibraryName>%(Filename).tlb</TypeLibraryName>
      <InterfaceIdentifierFileName>%(Filename)_i.c</InterfaceIdentifierFileName>
      <ProxyFileName>%(Filename)_p.c</ProxyFileName>
    </Midl>
    <Link>
      <AdditionalDependencies>externals\openal-soft\Debug\OpenAL32.lib;externals\alure\Debug\alure2.lib;C:\\Program Files (x86)\\OpenAL 1.1 SDK\\libs\\Win32\\OpenAL32.lib;C:\\Program Files (x86)\\Mega-Nerd\\libsndfile\\lib\\sndfile.lib;kernel32.lib;user32.lib;gdi32.lib;winspool.lib;shell32.lib;ole32.lib;oleaut32.lib;uuid.lib;comdlg32.lib;advapi32.lib;psapi.lib</AdditionalDependencies>
      <AdditionalLibraryDirectories>%(AdditionalLibraryDirectories)</AdditionalLibraryDirectories>
      <AdditionalOptions>%(AdditionalOptions) /machine:X86</AdditionalOptions>
      <GenerateDebugInformation>true</GenerateDebugInformation>
      <IgnoreSpecificDefaultLibraries>%(IgnoreSpecificDefaultLibraries)</IgnoreSpecificDefaultLibraries>
      <ImportLibrary>E:/nightfire_sdk/MetaAudio/Debug/MetaAudio.lib</ImportLibrary>
      <ProgramDataBaseFile>E:/nightfire_sdk/MetaAudio/Debug/MetaAudio.pdb</ProgramDataBaseFile>
      <SubSystem>Console</SubSystem>
      <LinkTimeCodeGeneration>Default</LinkTimeCodeGeneration>
    </Link>
    <ProjectReference>
      <LinkLibraryDependencies>false</LinkLibraryDependencies>
    </ProjectReference>
  </ItemDefinitionGroup>
  <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='Release|Win32'">
    <ClCompile>
      <AdditionalIncludeDirectories>E:\nightfire_sdk\MetaAudio\include;E:\nightfire_sdk\MetaAudio\externals\picojson;E:\nightfire_sdk\MetaAudio\externals\steamaudio\include;E:\nightfire_sdk\MetaAudio\externals\alure\include\AL;E:\nightfire_sdk\MetaAudio\externals\openal-soft\include\AL;E:\nightfire_sdk\MetaAudio\externals\metahook\include;E:\nightfire_sdk\MetaAudio\externals\metahook\include\interface;$(HLSDK)\common;$(HLSDK)\cl_dll;$(HLSDK)\engine;$(HLSDK)\public;$(HLSDK)\pm_shared;E:\nightfire_sdk\MetaAudio\externals\openal-soft\include;C:\\Program Files (x86)\\OpenAL 1.1 SDK\\include;%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>
      <AdditionalOptions>%(AdditionalOptions) /Zc:__cplusplus</AdditionalOptions>
      <AssemblerListingLocation>$(IntDir)</AssemblerListingLocation>
      <ExceptionHandling>Sync</ExceptionHandling>
      <InlineFunctionExpansion>AnySuitable</InlineFunctionExpansion>
      <LanguageStandard>stdcpp17</LanguageStandard>
      <Optimization>MaxSpeed</Optimization>
      <PrecompiledHeader>NotUsing</PrecompiledHeader>
      <RuntimeLibrary>MultiThreadedDLL</RuntimeLibrary>
      <RuntimeTypeInfo>true</RuntimeTypeInfo>
      <UseFullPaths>false</UseFullPaths>
      <WarningLevel>Level3</WarningLevel>
      <PreprocessorDefinitions>WIN32;_WINDOWS;NDEBUG;AUDIO_EXPORTS;NOMINMAX;PICOJSON_USE_INT64;CMAKE_INTDIR="Release";MetaAudio_EXPORTS;%(PreprocessorDefinitions)</PreprocessorDefinitions>
      <ObjectFileName>$(IntDir)</ObjectFileName>
      <DebugInformationFormat>
      </DebugInformationFormat>
    </ClCompile>
    <ResourceCompile>
      <PreprocessorDefinitions>WIN32;_WINDOWS;NDEBUG;AUDIO_EXPORTS;NOMINMAX;PICOJSON_USE_INT64;CMAKE_INTDIR=\"Release\";MetaAudio_EXPORTS;%(PreprocessorDefinitions)</PreprocessorDefinitions>
      <AdditionalIncludeDirectories>E:\nightfire_sdk\MetaAudio\include;E:\nightfire_sdk\MetaAudio\externals\picojson;E:\nightfire_sdk\MetaAudio\externals\steamaudio\include;E:\nightfire_sdk\MetaAudio\externals\alure\include\AL;E:\nightfire_sdk\MetaAudio\externals\openal-soft\include\AL;E:\nightfire_sdk\MetaAudio\externals\metahook\include;E:\nightfire_sdk\MetaAudio\externals\metahook\include\interface;E:\nightfire_sdk\MetaAudio\externals\metahook\HLSDK\common;E:\nightfire_sdk\MetaAudio\externals\metahook\HLSDK\cl_dll;E:\nightfire_sdk\MetaAudio\externals\metahook\HLSDK\engine;E:\nightfire_sdk\MetaAudio\externals\metahook\HLSDK\public;E:\nightfire_sdk\MetaAudio\externals\metahook\HLSDK\pm_shared;E:\nightfire_sdk\MetaAudio\externals\openal-soft\include;C:\\Program Files (x86)\\OpenAL 1.1 SDK\\include;%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>
    </ResourceCompile>
    <Midl>
      <AdditionalIncludeDirectories>E:\nightfire_sdk\MetaAudio\include;E:\nightfire_sdk\MetaAudio\externals\picojson;E:\nightfire_sdk\MetaAudio\externals\steamaudio\include;E:\nightfire_sdk\MetaAudio\externals\alure\include\AL;E:\nightfire_sdk\MetaAudio\externals\openal-soft\include\AL;E:\nightfire_sdk\MetaAudio\externals\metahook\include;E:\nightfire_sdk\MetaAudio\externals\metahook\include\interface;E:\nightfire_sdk\MetaAudio\externals\metahook\HLSDK\common;E:\nightfire_sdk\MetaAudio\externals\metahook\HLSDK\cl_dll;E:\nightfire_sdk\MetaAudio\externals\metahook\HLSDK\engine;E:\nightfire_sdk\MetaAudio\externals\metahook\HLSDK\public;E:\nightfire_sdk\MetaAudio\externals\metahook\HLSDK\pm_shared;E:\nightfire_sdk\MetaAudio\externals\openal-soft\include;C:\\Program Files (x86)\\OpenAL 1.1 SDK\\include;%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>
      <OutputDirectory>$(ProjectDir)/$(IntDir)</OutputDirectory>
      <HeaderFileName>%(Filename).h</HeaderFileName>
      <TypeLibraryName>%(Filename).tlb</TypeLibraryName>
      <InterfaceIdentifierFileName>%(Filename)_i.c</InterfaceIdentifierFileName>
      <ProxyFileName>%(Filename)_p.c</ProxyFileName>
    </Midl>
    <Link>
      <AdditionalDependencies>externals\openal-soft\Release\OpenAL32.lib;externals\alure\Release\alure2.lib;C:\\Program Files (x86)\\OpenAL 1.1 SDK\\libs\\Win32\\OpenAL32.lib;C:\\Program Files (x86)\\Mega-Nerd\\libsndfile\\lib\\sndfile.lib;kernel32.lib;user32.lib;gdi32.lib;winspool.lib;shell32.lib;ole32.lib;oleaut32.lib;uuid.lib;comdlg32.lib;advapi32.lib;psapi.lib</AdditionalDependencies>
      <AdditionalLibraryDirectories>%(AdditionalLibraryDirectories)</AdditionalLibraryDirectories>
      <AdditionalOptions>%(AdditionalOptions) /machine:X86</AdditionalOptions>
      <GenerateDebugInformation>false</GenerateDebugInformation>
      <IgnoreSpecificDefaultLibraries>%(IgnoreSpecificDefaultLibraries)</IgnoreSpecificDefaultLibraries>
      <ImportLibrary>E:/nightfire_sdk/MetaAudio/Release/MetaAudio.lib</ImportLibrary>
      <ProgramDataBaseFile>E:/nightfire_sdk/MetaAudio/Release/MetaAudio.pdb</ProgramDataBaseFile>
      <SubSystem>Console</SubSystem>
    </Link>
    <ProjectReference>
      <LinkLibraryDependencies>false</LinkLibraryDependencies>
    </ProjectReference>
  </ItemDefinitionGroup>
  <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|Win32'">
    <ClCompile>
      <AdditionalIncludeDirectories>E:\nightfire_sdk\MetaAudio\include;E:\nightfire_sdk\MetaAudio\externals\picojson;E:\nightfire_sdk\MetaAudio\externals\steamaudio\include;E:\nightfire_sdk\MetaAudio\externals\alure\include\AL;E:\nightfire_sdk\MetaAudio\externals\openal-soft\include\AL;E:\nightfire_sdk\MetaAudio\externals\metahook\include;E:\nightfire_sdk\MetaAudio\externals\metahook\include\interface;E:\nightfire_sdk\MetaAudio\externals\metahook\HLSDK\common;E:\nightfire_sdk\MetaAudio\externals\metahook\HLSDK\cl_dll;E:\nightfire_sdk\MetaAudio\externals\metahook\HLSDK\engine;E:\nightfire_sdk\MetaAudio\externals\metahook\HLSDK\public;E:\nightfire_sdk\MetaAudio\externals\metahook\HLSDK\pm_shared;E:\nightfire_sdk\MetaAudio\externals\openal-soft\include;C:\\Program Files (x86)\\OpenAL 1.1 SDK\\include;%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>
      <AdditionalOptions>%(AdditionalOptions) /Zc:__cplusplus</AdditionalOptions>
      <AssemblerListingLocation>$(IntDir)</AssemblerListingLocation>
      <ExceptionHandling>Sync</ExceptionHandling>
      <InlineFunctionExpansion>OnlyExplicitInline</InlineFunctionExpansion>
      <LanguageStandard>stdcpp17</LanguageStandard>
      <Optimization>MinSpace</Optimization>
      <PrecompiledHeader>NotUsing</PrecompiledHeader>
      <RuntimeLibrary>MultiThreadedDLL</RuntimeLibrary>
      <RuntimeTypeInfo>true</RuntimeTypeInfo>
      <UseFullPaths>false</UseFullPaths>
      <WarningLevel>Level3</WarningLevel>
      <PreprocessorDefinitions>WIN32;_WINDOWS;NDEBUG;AUDIO_EXPORTS;NOMINMAX;PICOJSON_USE_INT64;CMAKE_INTDIR="MinSizeRel";MetaAudio_EXPORTS;%(PreprocessorDefinitions)</PreprocessorDefinitions>
      <ObjectFileName>$(IntDir)</ObjectFileName>
      <DebugInformationFormat>
      </DebugInformationFormat>
    </ClCompile>
    <ResourceCompile>
      <PreprocessorDefinitions>WIN32;_WINDOWS;NDEBUG;AUDIO_EXPORTS;NOMINMAX;PICOJSON_USE_INT64;CMAKE_INTDIR=\"MinSizeRel\";MetaAudio_EXPORTS;%(PreprocessorDefinitions)</PreprocessorDefinitions>
      <AdditionalIncludeDirectories>E:\nightfire_sdk\MetaAudio\include;E:\nightfire_sdk\MetaAudio\externals\picojson;E:\nightfire_sdk\MetaAudio\externals\steamaudio\include;E:\nightfire_sdk\MetaAudio\externals\alure\include\AL;E:\nightfire_sdk\MetaAudio\externals\openal-soft\include\AL;E:\nightfire_sdk\MetaAudio\externals\metahook\include;E:\nightfire_sdk\MetaAudio\externals\metahook\include\interface;E:\nightfire_sdk\MetaAudio\externals\metahook\HLSDK\common;E:\nightfire_sdk\MetaAudio\externals\metahook\HLSDK\cl_dll;E:\nightfire_sdk\MetaAudio\externals\metahook\HLSDK\engine;E:\nightfire_sdk\MetaAudio\externals\metahook\HLSDK\public;E:\nightfire_sdk\MetaAudio\externals\metahook\HLSDK\pm_shared;E:\nightfire_sdk\MetaAudio\externals\openal-soft\include;C:\\Program Files (x86)\\OpenAL 1.1 SDK\\include;%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>
    </ResourceCompile>
    <Midl>
      <AdditionalIncludeDirectories>E:\nightfire_sdk\MetaAudio\include;E:\nightfire_sdk\MetaAudio\externals\picojson;E:\nightfire_sdk\MetaAudio\externals\steamaudio\include;E:\nightfire_sdk\MetaAudio\externals\alure\include\AL;E:\nightfire_sdk\MetaAudio\externals\openal-soft\include\AL;E:\nightfire_sdk\MetaAudio\externals\metahook\include;E:\nightfire_sdk\MetaAudio\externals\metahook\include\interface;E:\nightfire_sdk\MetaAudio\externals\metahook\HLSDK\common;E:\nightfire_sdk\MetaAudio\externals\metahook\HLSDK\cl_dll;E:\nightfire_sdk\MetaAudio\externals\metahook\HLSDK\engine;E:\nightfire_sdk\MetaAudio\externals\metahook\HLSDK\public;E:\nightfire_sdk\MetaAudio\externals\metahook\HLSDK\pm_shared;E:\nightfire_sdk\MetaAudio\externals\openal-soft\include;C:\\Program Files (x86)\\OpenAL 1.1 SDK\\include;%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>
      <OutputDirectory>$(ProjectDir)/$(IntDir)</OutputDirectory>
      <HeaderFileName>%(Filename).h</HeaderFileName>
      <TypeLibraryName>%(Filename).tlb</TypeLibraryName>
      <InterfaceIdentifierFileName>%(Filename)_i.c</InterfaceIdentifierFileName>
      <ProxyFileName>%(Filename)_p.c</ProxyFileName>
    </Midl>
    <Link>
      <AdditionalDependencies>externals\openal-soft\MinSizeRel\OpenAL32.lib;externals\alure\MinSizeRel\alure2.lib;C:\\Program Files (x86)\\OpenAL 1.1 SDK\\libs\\Win32\\OpenAL32.lib;C:\\Program Files (x86)\\Mega-Nerd\\libsndfile\\lib\\sndfile.lib;kernel32.lib;user32.lib;gdi32.lib;winspool.lib;shell32.lib;ole32.lib;oleaut32.lib;uuid.lib;comdlg32.lib;advapi32.lib</AdditionalDependencies>
      <AdditionalLibraryDirectories>%(AdditionalLibraryDirectories)</AdditionalLibraryDirectories>
      <AdditionalOptions>%(AdditionalOptions) /machine:X86</AdditionalOptions>
      <GenerateDebugInformation>false</GenerateDebugInformation>
      <IgnoreSpecificDefaultLibraries>%(IgnoreSpecificDefaultLibraries)</IgnoreSpecificDefaultLibraries>
      <ImportLibrary>E:/nightfire_sdk/MetaAudio/MinSizeRel/MetaAudio.lib</ImportLibrary>
      <ProgramDataBaseFile>E:/nightfire_sdk/MetaAudio/MinSizeRel/MetaAudio.pdb</ProgramDataBaseFile>
      <SubSystem>Console</SubSystem>
    </Link>
    <ProjectReference>
      <LinkLibraryDependencies>false</LinkLibraryDependencies>
    </ProjectReference>
  </ItemDefinitionGroup>
  <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|Win32'">
    <ClCompile>
      <AdditionalIncludeDirectories>$(HLSDK)\..\MetaAudio\include;$(HLSDK)\..\MetaAudio\externals\picojson;$(HLSDK)\..\MetaAudio\externals\steamaudio\include;$(HLSDK)\..\MetaAudio\externals\alure\include\AL;$(HLSDK)\..\MetaAudio\externals\openal-soft\include\AL;$(HLSDK)\..\MetaAudio\externals\metahook\include;$(HLSDK)\..\MetaAudio\externals\metahook\include\interface;$(HLSDK)\common;$(HLSDK)\cl_dll;$(HLSDK)\engine;$(HLSDK)\public;$(HLSDK)\pm_shared;$(HLSDK)\..\MetaAudio\externals\openal-soft\include;C:\\Program Files (x86)\\OpenAL 1.1 SDK\\include;%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>
      <AdditionalOptions>%(AdditionalOptions) /Zc:__cplusplus</AdditionalOptions>
      <AssemblerListingLocation>$(IntDir)</AssemblerListingLocation>
      <DebugInformationFormat>ProgramDatabase</DebugInformationFormat>
      <ExceptionHandling>Sync</ExceptionHandling>
      <InlineFunctionExpansion>OnlyExplicitInline</InlineFunctionExpansion>
      <LanguageStandard>stdcpp17</LanguageStandard>
      <Optimization>MaxSpeed</Optimization>
      <PrecompiledHeader>NotUsing</PrecompiledHeader>
      <RuntimeLibrary>MultiThreadedDLL</RuntimeLibrary>
      <RuntimeTypeInfo>true</RuntimeTypeInfo>
      <UseFullPaths>false</UseFullPaths>
      <WarningLevel>Level3</WarningLevel>
      <PreprocessorDefinitions>WIN32;_WINDOWS;NDEBUG;AUDIO_EXPORTS;NOMINMAX;PICOJSON_USE_INT64;CMAKE_INTDIR="RelWithDebInfo";MetaAudio_EXPORTS;%(PreprocessorDefinitions)</PreprocessorDefinitions>
      <ObjectFileName>$(IntDir)</ObjectFileName>
    </ClCompile>
    <ResourceCompile>
      <PreprocessorDefinitions>WIN32;_WINDOWS;NDEBUG;AUDIO_EXPORTS;NOMINMAX;PICOJSON_USE_INT64;CMAKE_INTDIR=\"RelWithDebInfo\";MetaAudio_EXPORTS;%(PreprocessorDefinitions)</PreprocessorDefinitions>
      <AdditionalIncludeDirectories>E:\nightfire_sdk\MetaAudio\include;E:\nightfire_sdk\MetaAudio\externals\picojson;E:\nightfire_sdk\MetaAudio\externals\steamaudio\include;E:\nightfire_sdk\MetaAudio\externals\alure\include\AL;E:\nightfire_sdk\MetaAudio\externals\openal-soft\include\AL;E:\nightfire_sdk\MetaAudio\externals\metahook\include;E:\nightfire_sdk\MetaAudio\externals\metahook\include\interface;E:\nightfire_sdk\MetaAudio\externals\metahook\HLSDK\common;E:\nightfire_sdk\MetaAudio\externals\metahook\HLSDK\cl_dll;E:\nightfire_sdk\MetaAudio\externals\metahook\HLSDK\engine;E:\nightfire_sdk\MetaAudio\externals\metahook\HLSDK\public;E:\nightfire_sdk\MetaAudio\externals\metahook\HLSDK\pm_shared;E:\nightfire_sdk\MetaAudio\externals\openal-soft\include;C:\\Program Files (x86)\\OpenAL 1.1 SDK\\include;%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>
    </ResourceCompile>
    <Midl>
      <AdditionalIncludeDirectories>E:\nightfire_sdk\MetaAudio\include;E:\nightfire_sdk\MetaAudio\externals\picojson;E:\nightfire_sdk\MetaAudio\externals\steamaudio\include;E:\nightfire_sdk\MetaAudio\externals\alure\include\AL;E:\nightfire_sdk\MetaAudio\externals\openal-soft\include\AL;E:\nightfire_sdk\MetaAudio\externals\metahook\include;E:\nightfire_sdk\MetaAudio\externals\metahook\include\interface;E:\nightfire_sdk\MetaAudio\externals\metahook\HLSDK\common;E:\nightfire_sdk\MetaAudio\externals\metahook\HLSDK\cl_dll;E:\nightfire_sdk\MetaAudio\externals\metahook\HLSDK\engine;E:\nightfire_sdk\MetaAudio\externals\metahook\HLSDK\public;E:\nightfire_sdk\MetaAudio\externals\metahook\HLSDK\pm_shared;E:\nightfire_sdk\MetaAudio\externals\openal-soft\include;C:\\Program Files (x86)\\OpenAL 1.1 SDK\\include;%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>
      <OutputDirectory>$(ProjectDir)/$(IntDir)</OutputDirectory>
      <HeaderFileName>%(Filename).h</HeaderFileName>
      <TypeLibraryName>%(Filename).tlb</TypeLibraryName>
      <InterfaceIdentifierFileName>%(Filename)_i.c</InterfaceIdentifierFileName>
      <ProxyFileName>%(Filename)_p.c</ProxyFileName>
    </Midl>
    <Link>
      <AdditionalDependencies>externals\openal-soft\RelWithDebInfo\OpenAL32.lib;externals\alure\RelWithDebInfo\alure2.lib;C:\\Program Files (x86)\\OpenAL 1.1 SDK\\libs\\Win32\\OpenAL32.lib;C:\\Program Files (x86)\\Mega-Nerd\\libsndfile\\lib\\sndfile.lib;kernel32.lib;user32.lib;gdi32.lib;winspool.lib;shell32.lib;ole32.lib;oleaut32.lib;uuid.lib;comdlg32.lib;advapi32.lib;psapi.lib</AdditionalDependencies>
      <AdditionalLibraryDirectories>%(AdditionalLibraryDirectories)</AdditionalLibraryDirectories>
      <AdditionalOptions>%(AdditionalOptions) /machine:X86</AdditionalOptions>
      <GenerateDebugInformation>true</GenerateDebugInformation>
      <IgnoreSpecificDefaultLibraries>%(IgnoreSpecificDefaultLibraries)</IgnoreSpecificDefaultLibraries>
      <ImportLibrary>E:/nightfire_sdk/MetaAudio/RelWithDebInfo/MetaAudio.lib</ImportLibrary>
      <ProgramDataBaseFile>E:/nightfire_sdk/MetaAudio/RelWithDebInfo/MetaAudio.pdb</ProgramDataBaseFile>
      <SubSystem>Console</SubSystem>
    </Link>
    <ProjectReference>
      <LinkLibraryDependencies>false</LinkLibraryDependencies>
    </ProjectReference>
  </ItemDefinitionGroup>
  <ItemGroup>
    <CustomBuild Include="E:\nightfire_sdk\MetaAudio\CMakeLists.txt">
      <StdOutEncoding>UTF-8</StdOutEncoding>
      <Message Condition="'$(Configuration)|$(Platform)'=='Debug|Win32'">Building Custom Rule E:/nightfire_sdk/MetaAudio/CMakeLists.txt</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='Debug|Win32'">setlocal
"C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\Common7\IDE\CommonExtensions\Microsoft\CMake\CMake\bin\cmake.exe" -SE:/nightfire_sdk/MetaAudio -BE:/nightfire_sdk/MetaAudio --check-stamp-file E:/nightfire_sdk/MetaAudio/CMakeFiles/generate.stamp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='Debug|Win32'">C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\Common7\IDE\CommonExtensions\Microsoft\CMake\CMake\share\cmake-3.20\Modules\CMakeCInformation.cmake;C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\Common7\IDE\CommonExtensions\Microsoft\CMake\CMake\share\cmake-3.20\Modules\CMakeCXXInformation.cmake;C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\Common7\IDE\CommonExtensions\Microsoft\CMake\CMake\share\cmake-3.20\Modules\CMakeCommonLanguageInclude.cmake;C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\Common7\IDE\CommonExtensions\Microsoft\CMake\CMake\share\cmake-3.20\Modules\CMakeGenericSystem.cmake;C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\Common7\IDE\CommonExtensions\Microsoft\CMake\CMake\share\cmake-3.20\Modules\CMakeInitializeConfigs.cmake;C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\Common7\IDE\CommonExtensions\Microsoft\CMake\CMake\share\cmake-3.20\Modules\CMakeLanguageInformation.cmake;C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\Common7\IDE\CommonExtensions\Microsoft\CMake\CMake\share\cmake-3.20\Modules\CMakeRCInformation.cmake;C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\Common7\IDE\CommonExtensions\Microsoft\CMake\CMake\share\cmake-3.20\Modules\CMakeSystemSpecificInformation.cmake;C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\Common7\IDE\CommonExtensions\Microsoft\CMake\CMake\share\cmake-3.20\Modules\CMakeSystemSpecificInitialize.cmake;C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\Common7\IDE\CommonExtensions\Microsoft\CMake\CMake\share\cmake-3.20\Modules\Compiler\CMakeCommonCompilerMacros.cmake;C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\Common7\IDE\CommonExtensions\Microsoft\CMake\CMake\share\cmake-3.20\Modules\Compiler\MSVC-C.cmake;C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\Common7\IDE\CommonExtensions\Microsoft\CMake\CMake\share\cmake-3.20\Modules\Compiler\MSVC-CXX.cmake;C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\Common7\IDE\CommonExtensions\Microsoft\CMake\CMake\share\cmake-3.20\Modules\Platform\Windows-MSVC-C.cmake;C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\Common7\IDE\CommonExtensions\Microsoft\CMake\CMake\share\cmake-3.20\Modules\Platform\Windows-MSVC-CXX.cmake;C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\Common7\IDE\CommonExtensions\Microsoft\CMake\CMake\share\cmake-3.20\Modules\Platform\Windows-MSVC.cmake;C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\Common7\IDE\CommonExtensions\Microsoft\CMake\CMake\share\cmake-3.20\Modules\Platform\Windows.cmake;C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\Common7\IDE\CommonExtensions\Microsoft\CMake\CMake\share\cmake-3.20\Modules\Platform\WindowsPaths.cmake;E:\nightfire_sdk\MetaAudio\CMakeFiles\3.20.21032501-MSVC_2\CMakeCCompiler.cmake;E:\nightfire_sdk\MetaAudio\CMakeFiles\3.20.21032501-MSVC_2\CMakeCXXCompiler.cmake;E:\nightfire_sdk\MetaAudio\CMakeFiles\3.20.21032501-MSVC_2\CMakeRCCompiler.cmake;E:\nightfire_sdk\MetaAudio\CMakeFiles\3.20.21032501-MSVC_2\CMakeSystem.cmake;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='Debug|Win32'">E:\nightfire_sdk\MetaAudio\CMakeFiles\generate.stamp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='Debug|Win32'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='Release|Win32'">Building Custom Rule E:/nightfire_sdk/MetaAudio/CMakeLists.txt</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='Release|Win32'">setlocal
"C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\Common7\IDE\CommonExtensions\Microsoft\CMake\CMake\bin\cmake.exe" -SE:/nightfire_sdk/MetaAudio -BE:/nightfire_sdk/MetaAudio --check-stamp-file E:/nightfire_sdk/MetaAudio/CMakeFiles/generate.stamp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='Release|Win32'">C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\Common7\IDE\CommonExtensions\Microsoft\CMake\CMake\share\cmake-3.20\Modules\CMakeCInformation.cmake;C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\Common7\IDE\CommonExtensions\Microsoft\CMake\CMake\share\cmake-3.20\Modules\CMakeCXXInformation.cmake;C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\Common7\IDE\CommonExtensions\Microsoft\CMake\CMake\share\cmake-3.20\Modules\CMakeCommonLanguageInclude.cmake;C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\Common7\IDE\CommonExtensions\Microsoft\CMake\CMake\share\cmake-3.20\Modules\CMakeGenericSystem.cmake;C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\Common7\IDE\CommonExtensions\Microsoft\CMake\CMake\share\cmake-3.20\Modules\CMakeInitializeConfigs.cmake;C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\Common7\IDE\CommonExtensions\Microsoft\CMake\CMake\share\cmake-3.20\Modules\CMakeLanguageInformation.cmake;C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\Common7\IDE\CommonExtensions\Microsoft\CMake\CMake\share\cmake-3.20\Modules\CMakeRCInformation.cmake;C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\Common7\IDE\CommonExtensions\Microsoft\CMake\CMake\share\cmake-3.20\Modules\CMakeSystemSpecificInformation.cmake;C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\Common7\IDE\CommonExtensions\Microsoft\CMake\CMake\share\cmake-3.20\Modules\CMakeSystemSpecificInitialize.cmake;C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\Common7\IDE\CommonExtensions\Microsoft\CMake\CMake\share\cmake-3.20\Modules\Compiler\CMakeCommonCompilerMacros.cmake;C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\Common7\IDE\CommonExtensions\Microsoft\CMake\CMake\share\cmake-3.20\Modules\Compiler\MSVC-C.cmake;C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\Common7\IDE\CommonExtensions\Microsoft\CMake\CMake\share\cmake-3.20\Modules\Compiler\MSVC-CXX.cmake;C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\Common7\IDE\CommonExtensions\Microsoft\CMake\CMake\share\cmake-3.20\Modules\Platform\Windows-MSVC-C.cmake;C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\Common7\IDE\CommonExtensions\Microsoft\CMake\CMake\share\cmake-3.20\Modules\Platform\Windows-MSVC-CXX.cmake;C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\Common7\IDE\CommonExtensions\Microsoft\CMake\CMake\share\cmake-3.20\Modules\Platform\Windows-MSVC.cmake;C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\Common7\IDE\CommonExtensions\Microsoft\CMake\CMake\share\cmake-3.20\Modules\Platform\Windows.cmake;C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\Common7\IDE\CommonExtensions\Microsoft\CMake\CMake\share\cmake-3.20\Modules\Platform\WindowsPaths.cmake;E:\nightfire_sdk\MetaAudio\CMakeFiles\3.20.21032501-MSVC_2\CMakeCCompiler.cmake;E:\nightfire_sdk\MetaAudio\CMakeFiles\3.20.21032501-MSVC_2\CMakeCXXCompiler.cmake;E:\nightfire_sdk\MetaAudio\CMakeFiles\3.20.21032501-MSVC_2\CMakeRCCompiler.cmake;E:\nightfire_sdk\MetaAudio\CMakeFiles\3.20.21032501-MSVC_2\CMakeSystem.cmake;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='Release|Win32'">E:\nightfire_sdk\MetaAudio\CMakeFiles\generate.stamp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='Release|Win32'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|Win32'">Building Custom Rule E:/nightfire_sdk/MetaAudio/CMakeLists.txt</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|Win32'">setlocal
"C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\Common7\IDE\CommonExtensions\Microsoft\CMake\CMake\bin\cmake.exe" -SE:/nightfire_sdk/MetaAudio -BE:/nightfire_sdk/MetaAudio --check-stamp-file E:/nightfire_sdk/MetaAudio/CMakeFiles/generate.stamp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|Win32'">C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\Common7\IDE\CommonExtensions\Microsoft\CMake\CMake\share\cmake-3.20\Modules\CMakeCInformation.cmake;C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\Common7\IDE\CommonExtensions\Microsoft\CMake\CMake\share\cmake-3.20\Modules\CMakeCXXInformation.cmake;C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\Common7\IDE\CommonExtensions\Microsoft\CMake\CMake\share\cmake-3.20\Modules\CMakeCommonLanguageInclude.cmake;C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\Common7\IDE\CommonExtensions\Microsoft\CMake\CMake\share\cmake-3.20\Modules\CMakeGenericSystem.cmake;C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\Common7\IDE\CommonExtensions\Microsoft\CMake\CMake\share\cmake-3.20\Modules\CMakeInitializeConfigs.cmake;C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\Common7\IDE\CommonExtensions\Microsoft\CMake\CMake\share\cmake-3.20\Modules\CMakeLanguageInformation.cmake;C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\Common7\IDE\CommonExtensions\Microsoft\CMake\CMake\share\cmake-3.20\Modules\CMakeRCInformation.cmake;C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\Common7\IDE\CommonExtensions\Microsoft\CMake\CMake\share\cmake-3.20\Modules\CMakeSystemSpecificInformation.cmake;C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\Common7\IDE\CommonExtensions\Microsoft\CMake\CMake\share\cmake-3.20\Modules\CMakeSystemSpecificInitialize.cmake;C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\Common7\IDE\CommonExtensions\Microsoft\CMake\CMake\share\cmake-3.20\Modules\Compiler\CMakeCommonCompilerMacros.cmake;C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\Common7\IDE\CommonExtensions\Microsoft\CMake\CMake\share\cmake-3.20\Modules\Compiler\MSVC-C.cmake;C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\Common7\IDE\CommonExtensions\Microsoft\CMake\CMake\share\cmake-3.20\Modules\Compiler\MSVC-CXX.cmake;C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\Common7\IDE\CommonExtensions\Microsoft\CMake\CMake\share\cmake-3.20\Modules\Platform\Windows-MSVC-C.cmake;C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\Common7\IDE\CommonExtensions\Microsoft\CMake\CMake\share\cmake-3.20\Modules\Platform\Windows-MSVC-CXX.cmake;C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\Common7\IDE\CommonExtensions\Microsoft\CMake\CMake\share\cmake-3.20\Modules\Platform\Windows-MSVC.cmake;C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\Common7\IDE\CommonExtensions\Microsoft\CMake\CMake\share\cmake-3.20\Modules\Platform\Windows.cmake;C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\Common7\IDE\CommonExtensions\Microsoft\CMake\CMake\share\cmake-3.20\Modules\Platform\WindowsPaths.cmake;E:\nightfire_sdk\MetaAudio\CMakeFiles\3.20.21032501-MSVC_2\CMakeCCompiler.cmake;E:\nightfire_sdk\MetaAudio\CMakeFiles\3.20.21032501-MSVC_2\CMakeCXXCompiler.cmake;E:\nightfire_sdk\MetaAudio\CMakeFiles\3.20.21032501-MSVC_2\CMakeRCCompiler.cmake;E:\nightfire_sdk\MetaAudio\CMakeFiles\3.20.21032501-MSVC_2\CMakeSystem.cmake;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|Win32'">E:\nightfire_sdk\MetaAudio\CMakeFiles\generate.stamp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|Win32'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|Win32'">Building Custom Rule E:/nightfire_sdk/MetaAudio/CMakeLists.txt</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|Win32'">setlocal
"C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\Common7\IDE\CommonExtensions\Microsoft\CMake\CMake\bin\cmake.exe" -SE:/nightfire_sdk/MetaAudio -BE:/nightfire_sdk/MetaAudio --check-stamp-file E:/nightfire_sdk/MetaAudio/CMakeFiles/generate.stamp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|Win32'">C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\Common7\IDE\CommonExtensions\Microsoft\CMake\CMake\share\cmake-3.20\Modules\CMakeCInformation.cmake;C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\Common7\IDE\CommonExtensions\Microsoft\CMake\CMake\share\cmake-3.20\Modules\CMakeCXXInformation.cmake;C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\Common7\IDE\CommonExtensions\Microsoft\CMake\CMake\share\cmake-3.20\Modules\CMakeCommonLanguageInclude.cmake;C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\Common7\IDE\CommonExtensions\Microsoft\CMake\CMake\share\cmake-3.20\Modules\CMakeGenericSystem.cmake;C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\Common7\IDE\CommonExtensions\Microsoft\CMake\CMake\share\cmake-3.20\Modules\CMakeInitializeConfigs.cmake;C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\Common7\IDE\CommonExtensions\Microsoft\CMake\CMake\share\cmake-3.20\Modules\CMakeLanguageInformation.cmake;C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\Common7\IDE\CommonExtensions\Microsoft\CMake\CMake\share\cmake-3.20\Modules\CMakeRCInformation.cmake;C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\Common7\IDE\CommonExtensions\Microsoft\CMake\CMake\share\cmake-3.20\Modules\CMakeSystemSpecificInformation.cmake;C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\Common7\IDE\CommonExtensions\Microsoft\CMake\CMake\share\cmake-3.20\Modules\CMakeSystemSpecificInitialize.cmake;C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\Common7\IDE\CommonExtensions\Microsoft\CMake\CMake\share\cmake-3.20\Modules\Compiler\CMakeCommonCompilerMacros.cmake;C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\Common7\IDE\CommonExtensions\Microsoft\CMake\CMake\share\cmake-3.20\Modules\Compiler\MSVC-C.cmake;C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\Common7\IDE\CommonExtensions\Microsoft\CMake\CMake\share\cmake-3.20\Modules\Compiler\MSVC-CXX.cmake;C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\Common7\IDE\CommonExtensions\Microsoft\CMake\CMake\share\cmake-3.20\Modules\Platform\Windows-MSVC-C.cmake;C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\Common7\IDE\CommonExtensions\Microsoft\CMake\CMake\share\cmake-3.20\Modules\Platform\Windows-MSVC-CXX.cmake;C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\Common7\IDE\CommonExtensions\Microsoft\CMake\CMake\share\cmake-3.20\Modules\Platform\Windows-MSVC.cmake;C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\Common7\IDE\CommonExtensions\Microsoft\CMake\CMake\share\cmake-3.20\Modules\Platform\Windows.cmake;C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\Common7\IDE\CommonExtensions\Microsoft\CMake\CMake\share\cmake-3.20\Modules\Platform\WindowsPaths.cmake;E:\nightfire_sdk\MetaAudio\CMakeFiles\3.20.21032501-MSVC_2\CMakeCCompiler.cmake;E:\nightfire_sdk\MetaAudio\CMakeFiles\3.20.21032501-MSVC_2\CMakeCXXCompiler.cmake;E:\nightfire_sdk\MetaAudio\CMakeFiles\3.20.21032501-MSVC_2\CMakeRCCompiler.cmake;E:\nightfire_sdk\MetaAudio\CMakeFiles\3.20.21032501-MSVC_2\CMakeSystem.cmake;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|Win32'">E:\nightfire_sdk\MetaAudio\CMakeFiles\generate.stamp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|Win32'">false</LinkObjects>
    </CustomBuild>
  </ItemGroup>
  <ItemGroup>
    <ClCompile Include="E:\nightfire_sdk\MetaAudio\src\exportfuncs.cpp" />
    <ClCompile Include="E:\nightfire_sdk\MetaAudio\src\metaaudio.cpp" />
    <ClCompile Include="E:\nightfire_sdk\MetaAudio\src\Effects\EnvEffects.cpp" />
    <ClCompile Include="E:\nightfire_sdk\MetaAudio\src\Loaders\SteamAudioMapMeshLoader.cpp" />
    <ClCompile Include="E:\nightfire_sdk\MetaAudio\src\snd_hook.cpp" />
    <ClCompile Include="E:\nightfire_sdk\MetaAudio\src\Voice\VoiceDecoder.cpp" />
    <ClCompile Include="E:\nightfire_sdk\MetaAudio\src\Vox\VoxManager.cpp" />
    <ClCompile Include="E:\nightfire_sdk\MetaAudio\src\Loaders\LocalAudioDecoder.cpp" />
    <ClCompile Include="E:\nightfire_sdk\MetaAudio\src\Utilities\AudioCache.cpp" />
    <ClCompile Include="E:\nightfire_sdk\MetaAudio\src\interface.cpp" />
    <ClCompile Include="E:\nightfire_sdk\MetaAudio\src\Config\EfxJsonReader.cpp" />
    <ClCompile Include="E:\nightfire_sdk\MetaAudio\src\Effects\GoldSrcOcclusionCalculator.cpp" />
    <ClCompile Include="E:\nightfire_sdk\MetaAudio\src\Effects\SteamAudioOcclusionCalculator.cpp" />
    <ClCompile Include="E:\nightfire_sdk\MetaAudio\src\Utilities\Fade.cpp" />
    <ClCompile Include="E:\nightfire_sdk\MetaAudio\src\Workarounds\NoWorkarounds.cpp" />
    <ClCompile Include="E:\nightfire_sdk\MetaAudio\src\Workarounds\XFiWorkarounds.cpp" />
    <ClCompile Include="E:\nightfire_sdk\MetaAudio\src\Loaders\GoldSrcFileBuf.cpp" />
    <ClCompile Include="E:\nightfire_sdk\MetaAudio\src\Loaders\GoldSrcFileStream.cpp" />
    <ClCompile Include="E:\nightfire_sdk\MetaAudio\src\Loaders\GoldSrcFileFactory.cpp" />
    <ClCompile Include="E:\nightfire_sdk\MetaAudio\src\Loaders\SoundLoader.cpp" />
    <ClCompile Include="E:\nightfire_sdk\MetaAudio\src\AudioEngine.cpp" />
    <ClCompile Include="E:\nightfire_sdk\MetaAudio\src\Utilities\ChannelManager.cpp" />
    <ClCompile Include="E:\nightfire_sdk\MetaAudio\src\snd_local.cpp" />
    <ClCompile Include="E:\nightfire_sdk\MetaAudio\src\SoundSources\SoundSourceFactory.cpp" />
    <ClCompile Include="E:\nightfire_sdk\MetaAudio\src\SoundSources\BaseSoundSource.cpp" />
    <ClCompile Include="E:\nightfire_sdk\MetaAudio\src\SoundSources\StaticSoundSource.cpp" />
    <ClCompile Include="E:\nightfire_sdk\MetaAudio\src\SoundSources\StreamingSoundSource.cpp" />
    <ClCompile Include="MinHook\buffer.c" />
    <ClCompile Include="MinHook\hde\hde32.c" />
    <ClCompile Include="MinHook\hde\hde64.c" />
    <ClCompile Include="MinHook\hook.c" />
    <ClCompile Include="MinHook\trampoline.c" />
    <ClCompile Include="pattern_scanner.cpp" />
  </ItemGroup>
  <ItemGroup>
    <ProjectReference Include="E:\nightfire_sdk\MetaAudio\ZERO_CHECK.vcxproj">
      <Project>{1988AEFB-5129-331D-AE9A-441B7CB43255}</Project>
      <Name>ZERO_CHECK</Name>
      <ReferenceOutputAssembly>false</ReferenceOutputAssembly>
      <CopyToOutputDirectory>Never</CopyToOutputDirectory>
    </ProjectReference>
    <ProjectReference Include="E:\nightfire_sdk\MetaAudio\externals\openal-soft\OpenAL.vcxproj">
      <Project>{1F461F71-7FDC-3626-9580-A9525713E1FA}</Project>
      <Name>OpenAL</Name>
    </ProjectReference>
    <ProjectReference Include="E:\nightfire_sdk\MetaAudio\externals\alure\alure2.vcxproj">
      <Project>{39F8F0FB-8F71-34D2-BABD-6F931A41AB2A}</Project>
      <Name>alure2</Name>
    </ProjectReference>
  </ItemGroup>
  <ItemGroup>
    <ClInclude Include="MinHook\buffer.h" />
    <ClInclude Include="MinHook\hde\hde32.h" />
    <ClInclude Include="MinHook\hde\hde64.h" />
    <ClInclude Include="MinHook\hde\pstdint.h" />
    <ClInclude Include="MinHook\hde\table32.h" />
    <ClInclude Include="MinHook\hde\table64.h" />
    <ClInclude Include="MinHook\MinHook.h" />
    <ClInclude Include="MinHook\trampoline.h" />
    <ClInclude Include="pattern_scanner.h" />
  </ItemGroup>
  <Import Project="$(VCTargetsPath)\Microsoft.Cpp.targets" />
  <ImportGroup Label="ExtensionTargets">
  </ImportGroup>
</Project>